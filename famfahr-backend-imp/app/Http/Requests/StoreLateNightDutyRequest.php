<?php

namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Carbon\Carbon;
class StoreLateNightDutyRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'duty_date' => 'required|date',
            'from_time' => 'required|date_format:H:i',
            'to_time' => 'required|date_format:H:i',
            'reason' => 'nullable|string|max:1000',
            'transport_required' => 'nullable|boolean',
        ];
    }

//    public function withValidator($validator)
//    {
//        $validator->after(function ($validator) {
//            $from = $this->input('from_time');
//            $to = $this->input('to_time');
//
//            if ($from && $to) {
//                $fromTime = Carbon::createFromFormat('H:i', $from);
//                $toTime = Carbon::createFromFormat('H:i', $to);
//
//                if ($toTime->lessThanOrEqualTo($fromTime)) {
//                    $validator->errors()->add('to_time', 'The To Time must be after From Time.');
//                }
//            }
//        });
//    }
    public function messages(): array
    {
        return [
            'duty_date.required' => 'Duty date is required',
            'duty_date.date' => 'Duty date must be a date',
            'from_time.required' => 'From time is required',
            'to_time.required' => 'To time is required',
            'transport_required.required' => 'Transport required is required',
            'reason.required' => 'Reason is required',
            'reason.string' => 'Reason must be a string',
            'reason.max' => 'Reason is too long',
        ];
    }
    protected function failedValidation(Validator $validator)
    {
        //dd($validator->errors());
        parent::failedValidation($validator); // TODO: Change the autogenerated stub
    }
}
