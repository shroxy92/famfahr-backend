<?php

namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;

class StoreClaimRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true; // or add policy logic
    }

    public function rules(): array
    {
        return [
            'category'    => 'required|string|max:255',
            'amount'      => 'required|numeric|min:0',
            'fmdate'      => 'required|date',
            'todate'      => 'required|date|after_or_equal:fmdate',
            'description' => 'required|string',
            'attachment'  => 'nullable|file|mimes:jpg,jpeg,png,pdf|max:2048',
        ];
    }

    public function messages(): array
    {
        return [
            'category.required' => 'Category is required.',
            'category.string' => 'Category must be string.',
            'category.max' => 'Category must be 255 characters.',
            'amount.required' => 'Amount is required.',
            'amount.numeric' => 'Amount must be numeric.',
            'amount.min' => 'Amount must be greater than zero.',
            'fmdate.required' => 'Date is required.',
            'todate.required' => 'Date must be date.',
            'todate.after_or_equal' => 'Date must be after or equal to date.',
            'description.required' => 'Description is required.',
            'description.string' => 'Description must be string.',
            'description.max' => 'Description must be 255 characters.',
//            'attachment.required' => 'Attachment is required.',
            'attachment.file' => 'Attachment must be a file.',
            'attachment.mimes' => 'Attachment must be a file.',
            'attachment.max' => 'Attachment must be 2MB.',

        ];
    }

    protected function failedValidation(Validator $validator)
    {
        //dd($validator->failed());
       //parent::failedValidation($validator); // TODO: Change the autogenerated stub
    }
}
