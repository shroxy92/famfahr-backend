<?php

namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;

class StoreExtraDutyRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'extra_date' => 'required|date',
            'start_time' => 'required|date_format:H:i',
            'end_time' => 'required|date_format:H:i',
            'task_description' => 'nullable|string|max:1000',
            'approved_by_lead' => 'sometimes|boolean',
        ];
    }
    public function prepareForValidation(): void
    {
        $this->merge([
            'approved_by_lead' => $this->has('approved_by_lead'),
        ]);
    }
    public function messages(): array
    {
        return [
            'extra_date.required' => 'The extra date field is required.',
            'extra_date.date' => 'The extra date must be a date.',
            'start_time.required' => 'The start time field is required.',
            'end_time.required' => 'The end time field is required.',
            'task_description.max' => 'The task description must be less than 1000 characters.',
            'approved_by_lead.boolean' => 'The approved user must be a boolean.',

        ];
    }

    protected function failedValidation(Validator $validator)
    {
        //dd($validator->errors());
        parent::failedValidation($validator); // TODO: Change the autogenerated stub
    }
}
